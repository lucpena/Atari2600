------- FILE horizontalposition.asm LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						;;    This program creates screen objects in the screen     ;;
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????
      5  10000 ????				       processor	6502
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;											bit 7	 bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284		Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE horizontalposition.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.07, 19/January/2020
      3  0000 ????
      4  0000 ????	       00 6b	   VERSION_MACRO =	107
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE horizontalposition.asm
      9  0000 ????
     10  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     11  0000 ????						;;    Start an unitialized segment at $80 for variables     ;;
     12  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     13  0000 ????
     14 U0081 ????				      SEG.U	Variables
     15 U0080					      ORG	$80
     16 U0080
     17 U0080		       00	   P0XPos     byte.b		; defines one byte for player 0 position X
     18 U0081
     19 U0081							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20 U0081							;;			  ROM START			     ;;
     21 U0081							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     22 U0081
     23  10000 ????				       SEG	Code
     24  f000					      ORG	$F000
     25  f000
     26  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     28  f00b
     29  f00b		       a2 88		      LDX	#$88
     30  f00d		       86 09		      STX	COLUBK	; black background
     31  f00f
     32  f00f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  f00f							;;		      Initialize variables		     ;;
     34  f00f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f00f
     36  f00f		       a9 32		      LDA	#50
     37  f011		       85 80		      STA	P0XPos
     38  f013
     39  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40  f013							;;	 Start a new frame, configuring VBLANK and VSYNC     ;;
     41  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  f013
     43  f013				   StartFrame
     44  f013		       a9 02		      LDA	#02
     45  f015		       85 01		      STA	VBLANK
     46  f017		       85 00		      STA	VSYNC
     47  f019
     48  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     49  f019							;;		Generate the 3 lines of VSYNC		     ;;
     50  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51  f019
     52  f019					      REPEAT	3
     53  f019		       85 02		      STA	WSYNC
     52  f019					      REPEND
     53  f01b		       85 02		      STA	WSYNC
     52  f01b					      REPEND
     53  f01d		       85 02		      STA	WSYNC
     54  f01f					      REPEND
     55  f01f
     56  f01f		       a9 00		      LDA	#0
     57  f021		       85 00		      STA	VSYNC
     58  f023
     59  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f023							;;   Set horizontal position of the player while in VBLANK  ;;
     61  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     62  f023
     63  f023		       a5 80		      LDA	P0XPos	; load register A with the X position
     64  f025		       29 7f		      AND	#$7F	; same as AND 01111111, forces bit 7 to zero. Keep the result positive
     65  f027
     66  f027		       85 02		      STA	WSYNC	; wait fot the next scanline
     67  f029		       85 2b		      STA	HMCLR	; clear old horizontal position values
     68  f02b
     69  f02b		       38		      SEC		; setting the carry before subtraction
     70  f02c
     71  f02c				   DivideLoop
     72  f02c		       e9 0f		      SBC	#15	; A -= 15
     73  f02e		       b0 fc		      BCS	DivideLoop	; loop while ( C[arry] != 0 )
     74  f030
     75  f030		       49 07		      EOR	#7	; adjust the remainder in A between -8 and 7
     76  f032
     77  f032					      REPEAT	4
     78  f032		       0a		      ASL		; shift left by 4, as HMP0 uses only 4 bits
     77  f032					      REPEND
     78  f033		       0a		      ASL		; shift left by 4, as HMP0 uses only 4 bits
     77  f033					      REPEND
     78  f034		       0a		      ASL		; shift left by 4, as HMP0 uses only 4 bits
     77  f034					      REPEND
     78  f035		       0a		      ASL		; shift left by 4, as HMP0 uses only 4 bits
     79  f036					      REPEND
     80  f036
     81  f036		       85 20		      STA	HMP0	; set fine position
     82  f038		       85 10		      STA	RESP0	; reset 15-step brute position
     83  f03a		       85 02		      STA	WSYNC	; wait for the next scanline
     84  f03c		       85 2a		      STA	HMOVE	; apply the fine position offset
     85  f03e
     86  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     87  f03e							;;	 Generate the TIA output of 37 lines of VBLANK	     ;;
     88  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     89  f03e
     90  f03e					      REPEAT	35	; 35 becouse we already called 2 WSYNC abovo
     91  f03e		       85 02		      STA	WSYNC
     90  f03e					      REPEND
     91  f040		       85 02		      STA	WSYNC
     90  f040					      REPEND
     91  f042		       85 02		      STA	WSYNC
     90  f042					      REPEND
     91  f044		       85 02		      STA	WSYNC
     90  f044					      REPEND
     91  f046		       85 02		      STA	WSYNC
     90  f046					      REPEND
     91  f048		       85 02		      STA	WSYNC
     90  f048					      REPEND
     91  f04a		       85 02		      STA	WSYNC
     90  f04a					      REPEND
     91  f04c		       85 02		      STA	WSYNC
     90  f04c					      REPEND
     91  f04e		       85 02		      STA	WSYNC
     90  f04e					      REPEND
     91  f050		       85 02		      STA	WSYNC
     90  f050					      REPEND
     91  f052		       85 02		      STA	WSYNC
     90  f052					      REPEND
     91  f054		       85 02		      STA	WSYNC
     90  f054					      REPEND
     91  f056		       85 02		      STA	WSYNC
     90  f056					      REPEND
     91  f058		       85 02		      STA	WSYNC
     90  f058					      REPEND
     91  f05a		       85 02		      STA	WSYNC
     90  f05a					      REPEND
     91  f05c		       85 02		      STA	WSYNC
     90  f05c					      REPEND
     91  f05e		       85 02		      STA	WSYNC
     90  f05e					      REPEND
     91  f060		       85 02		      STA	WSYNC
     90  f060					      REPEND
     91  f062		       85 02		      STA	WSYNC
     90  f062					      REPEND
     91  f064		       85 02		      STA	WSYNC
     90  f064					      REPEND
     91  f066		       85 02		      STA	WSYNC
     90  f066					      REPEND
     91  f068		       85 02		      STA	WSYNC
     90  f068					      REPEND
     91  f06a		       85 02		      STA	WSYNC
     90  f06a					      REPEND
     91  f06c		       85 02		      STA	WSYNC
     90  f06c					      REPEND
     91  f06e		       85 02		      STA	WSYNC
     90  f06e					      REPEND
     91  f070		       85 02		      STA	WSYNC
     90  f070					      REPEND
     91  f072		       85 02		      STA	WSYNC
     90  f072					      REPEND
     91  f074		       85 02		      STA	WSYNC
     90  f074					      REPEND
     91  f076		       85 02		      STA	WSYNC
     90  f076					      REPEND
     91  f078		       85 02		      STA	WSYNC
     90  f078					      REPEND
     91  f07a		       85 02		      STA	WSYNC
     90  f07a					      REPEND
     91  f07c		       85 02		      STA	WSYNC
     90  f07c					      REPEND
     91  f07e		       85 02		      STA	WSYNC
     90  f07e					      REPEND
     91  f080		       85 02		      STA	WSYNC
     90  f080					      REPEND
     91  f082		       85 02		      STA	WSYNC
     92  f084					      REPEND
     93  f084
     94  f084		       a9 00		      LDA	#0
     95  f086		       85 01		      STA	VBLANK
     96  f088
     97  f088							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f088							;;		     Rendering the scene		     ;;
     99  f088							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f088
    101  f088					      REPEAT	60
    102  f088		       85 02		      STA	WSYNC
    101  f088					      REPEND
    102  f08a		       85 02		      STA	WSYNC
    101  f08a					      REPEND
    102  f08c		       85 02		      STA	WSYNC
    101  f08c					      REPEND
    102  f08e		       85 02		      STA	WSYNC
    101  f08e					      REPEND
    102  f090		       85 02		      STA	WSYNC
    101  f090					      REPEND
    102  f092		       85 02		      STA	WSYNC
    101  f092					      REPEND
    102  f094		       85 02		      STA	WSYNC
    101  f094					      REPEND
    102  f096		       85 02		      STA	WSYNC
    101  f096					      REPEND
    102  f098		       85 02		      STA	WSYNC
    101  f098					      REPEND
    102  f09a		       85 02		      STA	WSYNC
    101  f09a					      REPEND
    102  f09c		       85 02		      STA	WSYNC
    101  f09c					      REPEND
    102  f09e		       85 02		      STA	WSYNC
    101  f09e					      REPEND
    102  f0a0		       85 02		      STA	WSYNC
    101  f0a0					      REPEND
    102  f0a2		       85 02		      STA	WSYNC
    101  f0a2					      REPEND
    102  f0a4		       85 02		      STA	WSYNC
    101  f0a4					      REPEND
    102  f0a6		       85 02		      STA	WSYNC
    101  f0a6					      REPEND
    102  f0a8		       85 02		      STA	WSYNC
    101  f0a8					      REPEND
    102  f0aa		       85 02		      STA	WSYNC
    101  f0aa					      REPEND
    102  f0ac		       85 02		      STA	WSYNC
    101  f0ac					      REPEND
    102  f0ae		       85 02		      STA	WSYNC
    101  f0ae					      REPEND
    102  f0b0		       85 02		      STA	WSYNC
    101  f0b0					      REPEND
    102  f0b2		       85 02		      STA	WSYNC
    101  f0b2					      REPEND
    102  f0b4		       85 02		      STA	WSYNC
    101  f0b4					      REPEND
    102  f0b6		       85 02		      STA	WSYNC
    101  f0b6					      REPEND
    102  f0b8		       85 02		      STA	WSYNC
    101  f0b8					      REPEND
    102  f0ba		       85 02		      STA	WSYNC
    101  f0ba					      REPEND
    102  f0bc		       85 02		      STA	WSYNC
    101  f0bc					      REPEND
    102  f0be		       85 02		      STA	WSYNC
    101  f0be					      REPEND
    102  f0c0		       85 02		      STA	WSYNC
    101  f0c0					      REPEND
    102  f0c2		       85 02		      STA	WSYNC
    101  f0c2					      REPEND
    102  f0c4		       85 02		      STA	WSYNC
    101  f0c4					      REPEND
    102  f0c6		       85 02		      STA	WSYNC
    101  f0c6					      REPEND
    102  f0c8		       85 02		      STA	WSYNC
    101  f0c8					      REPEND
    102  f0ca		       85 02		      STA	WSYNC
    101  f0ca					      REPEND
    102  f0cc		       85 02		      STA	WSYNC
    101  f0cc					      REPEND
    102  f0ce		       85 02		      STA	WSYNC
    101  f0ce					      REPEND
    102  f0d0		       85 02		      STA	WSYNC
    101  f0d0					      REPEND
    102  f0d2		       85 02		      STA	WSYNC
    101  f0d2					      REPEND
    102  f0d4		       85 02		      STA	WSYNC
    101  f0d4					      REPEND
    102  f0d6		       85 02		      STA	WSYNC
    101  f0d6					      REPEND
    102  f0d8		       85 02		      STA	WSYNC
    101  f0d8					      REPEND
    102  f0da		       85 02		      STA	WSYNC
    101  f0da					      REPEND
    102  f0dc		       85 02		      STA	WSYNC
    101  f0dc					      REPEND
    102  f0de		       85 02		      STA	WSYNC
    101  f0de					      REPEND
    102  f0e0		       85 02		      STA	WSYNC
    101  f0e0					      REPEND
    102  f0e2		       85 02		      STA	WSYNC
    101  f0e2					      REPEND
    102  f0e4		       85 02		      STA	WSYNC
    101  f0e4					      REPEND
    102  f0e6		       85 02		      STA	WSYNC
    101  f0e6					      REPEND
    102  f0e8		       85 02		      STA	WSYNC
    101  f0e8					      REPEND
    102  f0ea		       85 02		      STA	WSYNC
    101  f0ea					      REPEND
    102  f0ec		       85 02		      STA	WSYNC
    101  f0ec					      REPEND
    102  f0ee		       85 02		      STA	WSYNC
    101  f0ee					      REPEND
    102  f0f0		       85 02		      STA	WSYNC
    101  f0f0					      REPEND
    102  f0f2		       85 02		      STA	WSYNC
    101  f0f2					      REPEND
    102  f0f4		       85 02		      STA	WSYNC
    101  f0f4					      REPEND
    102  f0f6		       85 02		      STA	WSYNC
    101  f0f6					      REPEND
    102  f0f8		       85 02		      STA	WSYNC
    101  f0f8					      REPEND
    102  f0fa		       85 02		      STA	WSYNC
    101  f0fa					      REPEND
    102  f0fc		       85 02		      STA	WSYNC
    101  f0fc					      REPEND
    102  f0fe		       85 02		      STA	WSYNC
    103  f100					      REPEND
    104  f100
    105  f100		       a0 08		      LDY	#8	; counter to draw 8 rows of bitmap
    106  f102
    107  f102				   DrawBitmap
    108  f102		       b9 63 f2 	      LDA	P0Bitmap,Y	; load player bitmap slice of data
    109  f105		       85 1b		      STA	GRP0	; set graphics for player 0 slice
    110  f107
    111  f107		       b9 6c f2 	      LDA	P0Color,Y	; load player colo from lookup table
    112  f10a		       85 06		      STA	COLUP0
    113  f10c
    114  f10c		       85 02		      STA	WSYNC	; wait fot the next scanline
    115  f10e
    116  f10e		       88		      DEY
    117  f10f		       d0 f1		      BNE	DrawBitmap	; repeat next scanline until finished
    118  f111
    119  f111		       a9 00		      LDA	#0
    120  f113		       85 1b		      STA	GRP0	; disable P0 bitmap graphics
    121  f115
    122  f115					      REPEAT	124
    123  f115		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f115					      REPEND
    123  f117		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f117					      REPEND
    123  f119		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f119					      REPEND
    123  f11b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f11b					      REPEND
    123  f11d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f11d					      REPEND
    123  f11f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f11f					      REPEND
    123  f121		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f121					      REPEND
    123  f123		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f123					      REPEND
    123  f125		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f125					      REPEND
    123  f127		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f127					      REPEND
    123  f129		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f129					      REPEND
    123  f12b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f12b					      REPEND
    123  f12d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f12d					      REPEND
    123  f12f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f12f					      REPEND
    123  f131		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f131					      REPEND
    123  f133		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f133					      REPEND
    123  f135		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f135					      REPEND
    123  f137		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f137					      REPEND
    123  f139		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f139					      REPEND
    123  f13b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f13b					      REPEND
    123  f13d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f13d					      REPEND
    123  f13f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f13f					      REPEND
    123  f141		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f141					      REPEND
    123  f143		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f143					      REPEND
    123  f145		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f145					      REPEND
    123  f147		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f147					      REPEND
    123  f149		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f149					      REPEND
    123  f14b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f14b					      REPEND
    123  f14d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f14d					      REPEND
    123  f14f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f14f					      REPEND
    123  f151		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f151					      REPEND
    123  f153		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f153					      REPEND
    123  f155		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f155					      REPEND
    123  f157		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f157					      REPEND
    123  f159		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f159					      REPEND
    123  f15b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f15b					      REPEND
    123  f15d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f15d					      REPEND
    123  f15f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f15f					      REPEND
    123  f161		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f161					      REPEND
    123  f163		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f163					      REPEND
    123  f165		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f165					      REPEND
    123  f167		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f167					      REPEND
    123  f169		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f169					      REPEND
    123  f16b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f16b					      REPEND
    123  f16d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f16d					      REPEND
    123  f16f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f16f					      REPEND
    123  f171		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f171					      REPEND
    123  f173		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f173					      REPEND
    123  f175		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f175					      REPEND
    123  f177		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f177					      REPEND
    123  f179		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f179					      REPEND
    123  f17b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f17b					      REPEND
    123  f17d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f17d					      REPEND
    123  f17f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f17f					      REPEND
    123  f181		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f181					      REPEND
    123  f183		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f183					      REPEND
    123  f185		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f185					      REPEND
    123  f187		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f187					      REPEND
    123  f189		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f189					      REPEND
    123  f18b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f18b					      REPEND
    123  f18d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f18d					      REPEND
    123  f18f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f18f					      REPEND
    123  f191		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f191					      REPEND
    123  f193		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f193					      REPEND
    123  f195		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f195					      REPEND
    123  f197		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f197					      REPEND
    123  f199		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f199					      REPEND
    123  f19b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f19b					      REPEND
    123  f19d		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f19d					      REPEND
    123  f19f		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f19f					      REPEND
    123  f1a1		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1a1					      REPEND
    123  f1a3		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1a3					      REPEND
    123  f1a5		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1a5					      REPEND
    123  f1a7		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1a7					      REPEND
    123  f1a9		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1a9					      REPEND
    123  f1ab		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1ab					      REPEND
    123  f1ad		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1ad					      REPEND
    123  f1af		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1af					      REPEND
    123  f1b1		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1b1					      REPEND
    123  f1b3		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1b3					      REPEND
    123  f1b5		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1b5					      REPEND
    123  f1b7		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1b7					      REPEND
    123  f1b9		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1b9					      REPEND
    123  f1bb		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1bb					      REPEND
    123  f1bd		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1bd					      REPEND
    123  f1bf		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1bf					      REPEND
    123  f1c1		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1c1					      REPEND
    123  f1c3		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1c3					      REPEND
    123  f1c5		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1c5					      REPEND
    123  f1c7		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1c7					      REPEND
    123  f1c9		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1c9					      REPEND
    123  f1cb		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1cb					      REPEND
    123  f1cd		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1cd					      REPEND
    123  f1cf		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1cf					      REPEND
    123  f1d1		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1d1					      REPEND
    123  f1d3		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1d3					      REPEND
    123  f1d5		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1d5					      REPEND
    123  f1d7		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1d7					      REPEND
    123  f1d9		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1d9					      REPEND
    123  f1db		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1db					      REPEND
    123  f1dd		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1dd					      REPEND
    123  f1df		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1df					      REPEND
    123  f1e1		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1e1					      REPEND
    123  f1e3		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1e3					      REPEND
    123  f1e5		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1e5					      REPEND
    123  f1e7		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1e7					      REPEND
    123  f1e9		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1e9					      REPEND
    123  f1eb		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1eb					      REPEND
    123  f1ed		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1ed					      REPEND
    123  f1ef		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1ef					      REPEND
    123  f1f1		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1f1					      REPEND
    123  f1f3		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1f3					      REPEND
    123  f1f5		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1f5					      REPEND
    123  f1f7		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1f7					      REPEND
    123  f1f9		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1f9					      REPEND
    123  f1fb		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1fb					      REPEND
    123  f1fd		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1fd					      REPEND
    123  f1ff		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f1ff					      REPEND
    123  f201		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f201					      REPEND
    123  f203		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f203					      REPEND
    123  f205		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f205					      REPEND
    123  f207		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f207					      REPEND
    123  f209		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    122  f209					      REPEND
    123  f20b		       85 02		      STA	WSYNC	; wait for remaining 124 empty scanlines
    124  f20d					      REPEND
    125  f20d
    126  f20d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    127  f20d							;;  Output 30 more VBLANK scanlines to complete the frame   ;;
    128  f20d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f20d
    130  f20d				   Overscan
    131  f20d		       a9 02		      LDA	#2
    132  f20f		       85 01		      STA	VBLANK
    133  f211
    134  f211					      REPEAT	30
    135  f211		       85 02		      STA	WSYNC
    134  f211					      REPEND
    135  f213		       85 02		      STA	WSYNC
    134  f213					      REPEND
    135  f215		       85 02		      STA	WSYNC
    134  f215					      REPEND
    135  f217		       85 02		      STA	WSYNC
    134  f217					      REPEND
    135  f219		       85 02		      STA	WSYNC
    134  f219					      REPEND
    135  f21b		       85 02		      STA	WSYNC
    134  f21b					      REPEND
    135  f21d		       85 02		      STA	WSYNC
    134  f21d					      REPEND
    135  f21f		       85 02		      STA	WSYNC
    134  f21f					      REPEND
    135  f221		       85 02		      STA	WSYNC
    134  f221					      REPEND
    135  f223		       85 02		      STA	WSYNC
    134  f223					      REPEND
    135  f225		       85 02		      STA	WSYNC
    134  f225					      REPEND
    135  f227		       85 02		      STA	WSYNC
    134  f227					      REPEND
    135  f229		       85 02		      STA	WSYNC
    134  f229					      REPEND
    135  f22b		       85 02		      STA	WSYNC
    134  f22b					      REPEND
    135  f22d		       85 02		      STA	WSYNC
    134  f22d					      REPEND
    135  f22f		       85 02		      STA	WSYNC
    134  f22f					      REPEND
    135  f231		       85 02		      STA	WSYNC
    134  f231					      REPEND
    135  f233		       85 02		      STA	WSYNC
    134  f233					      REPEND
    135  f235		       85 02		      STA	WSYNC
    134  f235					      REPEND
    135  f237		       85 02		      STA	WSYNC
    134  f237					      REPEND
    135  f239		       85 02		      STA	WSYNC
    134  f239					      REPEND
    135  f23b		       85 02		      STA	WSYNC
    134  f23b					      REPEND
    135  f23d		       85 02		      STA	WSYNC
    134  f23d					      REPEND
    135  f23f		       85 02		      STA	WSYNC
    134  f23f					      REPEND
    135  f241		       85 02		      STA	WSYNC
    134  f241					      REPEND
    135  f243		       85 02		      STA	WSYNC
    134  f243					      REPEND
    135  f245		       85 02		      STA	WSYNC
    134  f245					      REPEND
    135  f247		       85 02		      STA	WSYNC
    134  f247					      REPEND
    135  f249		       85 02		      STA	WSYNC
    134  f249					      REPEND
    135  f24b		       85 02		      STA	WSYNC
    136  f24d					      REPEND
    137  f24d
    138  f24d		       a9 00		      LDA	#0
    139  f24f		       85 01		      STA	VBLANK
    140  f251
    141  f251							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    142  f251							;;		     Animating the Player		     ;;
    143  f251							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    144  f251
    145  f251		       a5 80		      LDA	P0XPos
    146  f253		       c9 50		      CMP	#80
    147  f255		       10 03		      BPL	ResetXPos	; iF A > 80, ressets position to X = 80
    148  f257		       4c 5e f2 	      JMP	IncrmXPos
    149  f25a
    150  f25a				   ResetXPos
    151  f25a		       a9 28		      LDA	#40
    152  f25c		       85 80		      STA	P0XPos	; reset player to position X = 40
    153  f25e
    154  f25e				   IncrmXPos
    155  f25e		       e6 80		      INC	P0XPos
    156  f260
    157  f260
    158  f260							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    159  f260							;;		      Loop to next frame		     ;;
    160  f260							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    161  f260
    162  f260		       4c 13 f0 	      JMP	StartFrame
    163  f263
    164  f263							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    165  f263							;;		   Look up tables for sprites		     ;;
    166  f263							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    167  f263
    168  f263				   P0Bitmap
    169  f263		       00		      byte.b	#%00000000
    170  f264		       28		      byte.b	#%00101000
    171  f265		       74		      byte.b	#%01110100
    172  f266		       fa		      byte.b	#%11111010
    173  f267		       fa		      byte.b	#%11111010
    174  f268		       fa		      byte.b	#%11111010
    175  f269		       fe		      byte.b	#%11111110
    176  f26a		       6c		      byte.b	#%01101100
    177  f26b		       30		      byte.b	#%00110000
    178  f26c
    179  f26c				   P0Color
    180  f26c		       00		      byte.b	#$00
    181  f26d		       40		      byte.b	#$40
    182  f26e		       40		      byte.b	#$40
    183  f26f		       40		      byte.b	#$40
    184  f270		       40		      byte.b	#$40
    185  f271		       42		      byte.b	#$42
    186  f272		       42		      byte.b	#$42
    187  f273		       44		      byte.b	#$44
    188  f274		       d2		      byte.b	#$D2
    189  f275
    190  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    191  f275							;;			 Complete ROM			     ;;
    192  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    193  f275
    194  fffc					      ORG	$FFFC
    195  fffc		       00 f0		      .word.w	Reset
    196  fffe		       00 f0		      .word.w	Reset
